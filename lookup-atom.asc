sync lookup-atom (str memory)
    var atom-memory : foreign having ?get-char @advance-to-next-atom ?eof ?last-atom ?current-atom ?match-string
    buffer : string
    children: ["match top level" "name match" unsuccessful successful]
    connections: [
        :self init -> "match top level" init

        "match top level" EOF -> unsuccessful conclude
        "match top level" "start name match" -> "name match" go
	
	"name match" mismatch -> "match top level" advance
	"name match" ok -> successful conclude

        unsuccessful found -> :self found
        unsuccessful answer -> :self answer
	
        successful found -> :self found
        successful answer -> :self answer
    ]

    child "match top level"
        on init
	    (send '("match top level" "start name match") (atom-memory ?current-atom) message parts)
	on advance
            (atom-memory ?advance-to-next-atom)
	    (send '("match top level" "start name match") (atom-memory ?current-atom) message parts)
    child "name match"
        on go
	    (if (atom-memory ?match-string buffer)
	        (send '("name match" ok) t message parts)
	        (send '("name match" mismatch) trigger message parts))
    child "unsucessful"
        on conclude
	    (send-sync '(unsuccessful found) nil message parts)
	    (send-sync '(unsuccessful answer) nil message parts)
    child "sucessful"
        on conclude
	    (send-sync '(successful found) t message parts)
	    (send-sync '(successful answer) (atom-memory current-atom) message parts)

    main
        (setf atom-memory memory)
	(setf buffer str)
	(send '(:self init) t nil parts)
	(route-messages connections parts parts)
	(dispatch parts connections conclude-predicate)
	(values answer found)